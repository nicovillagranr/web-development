import './style.css';
import * as THREE from 'three'
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Canvas
const canvas = document.querySelector('canvas.webgl')
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Scene
const scene = new THREE.Scene()
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Object
const group = new THREE.Group();
group.position.y = 1;
group.rotation.x = Math.PI / 2;
// group.rotation.reorder('XYZ');
// group.rotation.y = 0.25;
// group.rotation.x = 0.25;
scene.add(group);

const cube1 = new THREE.Mesh(
    new THREE.BoxGeometry(1 , 1, 1),
    new THREE.MeshBasicMaterial({ color: 0xff000 })
); 
group.add(cube1);

const cube2 = new THREE.Mesh(
    new THREE.BoxGeometry(1 , 1, 1),
    new THREE.MeshBasicMaterial({ color: '#999' })
); 
cube2.position.x = -2;
group.add(cube2);

const cube3 = new THREE.Mesh(
    new THREE.BoxGeometry(1 , 1, 1),
    new THREE.MeshBasicMaterial({ color: '#a0a322' })
); 
cube3.position.x = 2;
group.add(cube3);

// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Axes Helper | Herramienta para agregar una referencia visual a la hora de desarrollar
const axesHelper = new THREE.AxesHelper(2);
scene.add(axesHelper);
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Sizes
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height);
camera.position.z = 3;
scene.add(camera);
// Esto sirve para asignarle a la cámara una objeto al cuál mirar (Desde la perspectiva de la cámara).
// camera.lookAt(mesh.position);
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
// Renderer
const renderer = new THREE.WebGLRenderer({
    canvas: canvas
});
renderer.setSize(sizes.width, sizes.height);
renderer.render(scene, camera);
